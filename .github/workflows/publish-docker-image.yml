name: Publish Docker Image

on:
  workflow_dispatch:
    inputs:
      imageTag:
        description: 'docker image tag'
        type: string
        required: true
        default: latest
      registry:
        description: 'select registry'
        type: choice
        default: registry.cn-hangzhou.aliyuncs.com/opensrcdevelop/console-auth-server
        options:
          - ccr.ccs.tencentyun.com/opensrcdevelop/console-auth-server
          - registry.cn-hangzhou.aliyuncs.com/opensrcdevelop/console-auth-server
      createGitTag:
        description: 'create git tag'
        type: boolean
        default: false

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Install Dependecies
        run: |
          npm install
      
      - name: Build
        run: |
          npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Console-Auth-Server Artifacts
          path: |
            ./dist
            ./nginx
            ./Dockerfile
  build-push-docker-image:
    name: Build And Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: Console-Auth-Server Artifacts

      - name: Build Docker image
        run: |
          docker build -t ${{ inputs.registry }}:${{ inputs.imageTag }} .

      - name: Login Registry
        run: |
          if [ ${{ inputs.registry }} == 'ccr.ccs.tencentyun.com/opensrcdevelop/console-auth-server' ]; then
            echo "Login CCR"
            docker login -u ${{ secrets.CCR_USERNAME }} -p '${{ secrets.CCR_PASSWORD }}' ${{ inputs.registry }}
          elif [ ${{ inputs.registry }} == 'registry.cn-hangzhou.aliyuncs.com/opensrcdevelop/console-auth-server' ]; then
            echo "Login ACR"
            docker login -u ${{ secrets.ACR_USERNAME }} -p '${{ secrets.ACR_PASSWORD }}' ${{ inputs.registry }}
          fi

      - name: Push Docker image
        run: |
          docker push ${{ inputs.registry }}:${{ inputs.imageTag }}

  create-git-tag:
    name: Create Git Tag
    permissions: write-all
    if: inputs.createGitTag
    needs:
      - build-push-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Git
        run: |
          git config --global user.email "${{ secrets.USER_EMAIL }}"
          git config --global user.name "GitHub Action"
        
      - name: Create Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name="${{ inputs.imageTag }}"
          git tag -a ${tag_name} -m "Automatic tag creation on ${GITHUB_SHA}"
          echo "Pushing tag ${tag_name}"
          git push origin ${tag_name}